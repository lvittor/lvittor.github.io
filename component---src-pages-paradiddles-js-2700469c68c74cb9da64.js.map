{"version":3,"sources":["webpack:///./src/components/Paradiddle/Chart.jsx","webpack:///./src/components/Paradiddle/Axis.jsx","webpack:///./src/components/Paradiddle/Line.jsx","webpack:///./src/components/Paradiddle/Timeline.jsx","webpack:///./src/components/Paradiddle/Staff.jsx","webpack:///./src/components/Paradiddle/Exercises.jsx","webpack:///./src/components/Paradiddle/ParadiddleContainer.jsx","webpack:///./src/pages/paradiddles.js"],"names":["ChartContext","createContext","Chart","hasNoListener","dimensions","children","onMouseMove","onMouseEnter","onMouseLeave","Provider","value","className","width","height","transform","marginLeft","marginTop","x","y","boundedHeight","boundedWidth","defaultProps","axisComponentsByDimension","label","formatTick","scale","props","ticks","x2","map","tick","i","key","numberOfTicks","y2","style","Axis","dimension","useContext","Component","d3","Line","type","data","xAccessor","yAccessor","y0Accessor","interpolation","lineGenerator","y0","y1","classNames","d","formatDate","Timeline","selectedExercise","useChartDimensions","ref","useState","isMouseMove","setIsMouseMove","currentHoveredData","setCurrentHoveredData","currentHoveredCircleCoords","setCurrentHoveredCircleCoords","xScale","domain","range","yScale","xAccessorScaled","yAccessorScaled","e","clientX","currentTarget","getBoundingClientRect","hoveredDate","clientY","invert","getDistanceFromHoveredDate","Math","abs","closestIndex","a","b","closestDataPoints","length","push","circleCoords","closestValues","j","closestXVal","closestYVal","opacity","line","circle","cx","cy","Circle","r","fill","Tooltip","exercises","date","leftScrubCoord","topScrubCoord","left","top","Staff","variations","currentVariation","beats","highHat","variationNote","StaffNoteCol","note","viewBox","Exercises","handleVariationChange","step","variation","onClick","parseDate","dateAccessor","bpmAccessor","bpm","variationA","variationB","variationC","variationD","ParadiddleContainer","dataA","dataB","dataC","dataD","setSelectedExercise","Link","doOpenInNewTab","to","Paradiddles","Layout","showFooter","SEO","title","image","twitterImage","MaxWidth","size"],"mappings":"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","file":"component---src-pages-paradiddles-js-2700469c68c74cb9da64.js","sourcesContent":["import React, { createContext, useContext } from \"react\"\nimport { dimensionsPropsType } from \"components/utils\"\nimport \"./Chart.scss\"\n\nconst ChartContext = createContext()\nexport const useChartDimensions = () => useContext(ChartContext)\n\nconst Chart = ({ hasNoListener, dimensions, children, onMouseMove, onMouseEnter, onMouseLeave }) => (\n    <ChartContext.Provider value={dimensions}>\n        <svg\n            className=\"Chart\"\n            width={dimensions.width}\n            height={dimensions.height}>\n\n            <g transform={`translate(${dimensions.marginLeft}, ${dimensions.marginTop})`}>\n                {children}\n            </g>\n            {!hasNoListener && (\n                <rect\n                    className=\"Chart__listener\"\n                    x={dimensions.marginLeft}\n                    y={dimensions.marginTop}\n                    height={dimensions.boundedHeight}\n                    width={dimensions.boundedWidth}\n                    onMouseMove={onMouseMove}\n                    onMouseLeave={onMouseLeave}\n                    onMouseEnter={onMouseEnter}\n                />\n            )}\n        </svg>\n    </ChartContext.Provider>\n)\n\nChart.propTypes = {\n    dimensions: dimensionsPropsType\n}\n\nChart.defaultProps = {\n    dimensions: {}\n}\n\nexport default Chart\n\n// <rect\n//     className=\"Chart__listener\"\n//     x={margin.left}\n//     y={margin.top}\n//     height={dimensoions.height}\n//     width={dimensions.width}\n//     onMouseMove={onMouseMove}\n//     onMouseLeave={onMouseLeave}\n//     onMouseEnter={onMouseEnter}\n// />","import React from \"react\"\nimport PropTypes from \"prop-types\"\nimport * as d3 from 'd3'\nimport { dimensionsPropsType } from \"components/utils\";\nimport { useChartDimensions } from \"./Chart\";\n\nconst axisComponentsByDimension = {\n    x: AxisHorizontal,\n    y: AxisVertical,\n}\nconst Axis = ({ dimension, ...props }) => {\n    const dimensions = useChartDimensions()\n    const Component = axisComponentsByDimension[dimension]\n    if (!Component) return null\n\n    return (\n        <Component\n            dimensions={dimensions}\n            {...props}\n        />\n    )\n}\n\nAxis.propTypes = {\n    dimension: PropTypes.oneOf([\"x\", \"y\"]),\n    dimensions: dimensionsPropsType,\n    scale: PropTypes.func,\n    label: PropTypes.string,\n    formatTick: PropTypes.func,\n}\n\nAxis.defaultProps = {\n    dimension: \"x\",\n    scale: null,\n    formatTick: d3.format(\",\"),\n}\n\nexport default Axis\n\n\nfunction AxisHorizontal({ dimensions, label, formatTick, scale, ...props }) {\n    // const numberOfTicks = dimensions.boundedWidth < 600\n    //     ? dimensions.boundedWidth / 100\n    //     : dimensions.boundedWidth / 250\n\n    const numberOfTicks = 7\n    const ticks = scale.ticks(numberOfTicks)\n\n    return (\n        <g\n            className=\"Axis AxisHorizontal\"\n            transform={`translate(0, ${dimensions.boundedHeight})`} {...props}>\n            <line\n                className=\"Axis__line\"\n                x2={dimensions.boundedWidth}\n            />\n\n            {ticks.map((tick, i) => (\n                <text\n                    key={tick}\n                    className=\"Axis__tick\"\n                    transform={`translate(${scale(tick)}, 25)`}\n                >\n                    {formatTick(tick)}\n                </text>\n            ))}\n\n            {label && (\n                <text\n                    className=\"Axis__label\"\n                    transform={`translate(${dimensions.boundedWidth / 2}, 60)`}\n                >\n                    {label}\n                </text>\n            )}\n        </g>\n    )\n}\n\nfunction AxisVertical({ dimensions, label, formatTick, scale, ...props }) {\n    const numberOfTicks = dimensions.boundedHeight / 70\n\n    const ticks = scale.ticks(numberOfTicks)\n\n    return (\n        <g className=\"Axis AxisVertical\" {...props}>\n            <line\n                className=\"Axis__line\"\n                y2={dimensions.boundedHeight}\n            />\n\n            {ticks.map((tick, i) => (\n                <text\n                    key={tick}\n                    className=\"Axis__tick\"\n                    transform={`translate(-26, ${scale(tick)})`}\n                >\n                    {formatTick(tick)}\n                </text>\n            ))}\n\n            {label && (\n                <text\n                    className=\"Axis__label\"\n                    style={{\n                        transform: `translate(-56px, ${dimensions.boundedHeight / 2}px) rotate(-90deg)`\n                    }}\n                >\n                    {label}\n                </text>\n            )}\n        </g>\n    )\n}\n","import React from \"react\"\nimport classNames from \"classnames\"\nimport PropTypes from \"prop-types\"\nimport * as d3 from \"d3\"\nimport { accessorPropsType } from \"components/utils\";\n\nconst Line = ({ className, type, data, xAccessor, yAccessor, y0Accessor, interpolation, ...props }) => {\n    const lineGenerator = d3[type]()\n        .x(xAccessor)\n        .y(yAccessor)\n\n    if (type === \"area\") {\n        lineGenerator\n            .y0(y0Accessor)\n            .y1(yAccessor)\n    }\n\n    return (\n        <path {...props}\n            className={classNames(`Line Line--type-${type}`, className)}\n            d={lineGenerator(data)}\n        />\n    )\n}\n\nLine.propTypes = {\n    type: PropTypes.oneOf([\"line\", \"area\"]),\n    data: PropTypes.array,\n    xAccessor: accessorPropsType,\n    yAccessor: accessorPropsType,\n    y0Accessor: accessorPropsType,\n    interpolation: PropTypes.func,\n}\n\nLine.defaultProps = {\n    type: \"line\",\n    y0Accessor: 0,\n    interpolation: d3.curveMonotoneX,\n}\n\nexport default Line\n","import React, { useState } from 'react'\nimport classNames from \"classnames\"\nimport PropTypes from 'prop-types'\nimport * as d3 from \"d3\"\nimport { useChartDimensions } from \"components/utils\"\nimport Axis from \"components/Paradiddle/Axis\"\nimport Chart from 'components/Paradiddle/Chart'\nimport Line from \"components/Paradiddle/Line\"\nimport './Timeline.scss'\n\nconst formatDate = d3.timeFormat(\"%A\")\n\nconst Timeline = ({ data, xAccessor, yAccessor, label, className, selectedExercise }) => {\n    const [ref, dimensions] = useChartDimensions()\n    const [isMouseMove, setIsMouseMove] = useState(false)\n    const [currentHoveredData, setCurrentHoveredData] = useState()\n    const [currentHoveredCircleCoords, setCurrentHoveredCircleCoords] = useState()\n\n    const xScale = d3.scaleTime()\n        .domain(d3.extent(data[0], xAccessor))\n        .range([0, dimensions.boundedWidth])\n\n    const yScale = d3.scaleLinear()\n        .domain([120, 180])\n        .range([dimensions.boundedHeight, 0])\n\n    const xAccessorScaled = d => xScale(xAccessor(d))\n    const yAccessorScaled = d => yScale(yAccessor(d))\n\n    const onMouseMove = e => {\n        let x = e.clientX - e.currentTarget.getBoundingClientRect().x;\n        let y = e.clientY - e.currentTarget.getBoundingClientRect().y;\n\n        const hoveredDate = xScale.invert(x);\n\n        const getDistanceFromHoveredDate = d => Math.abs(\n            xAccessor(d) - hoveredDate\n        )\n\n        const closestIndex = d3.scan(data[0], (a, b) => (\n            getDistanceFromHoveredDate(a) - getDistanceFromHoveredDate(b)\n        ))\n\n        let closestDataPoints = []\n        for (let i=0; i < data.length; i++) {\n            closestDataPoints.push(data[i][closestIndex])\n        }\n\n        let circleCoords = []\n        let closestValues = []\n        for (let j=0; j < closestDataPoints.length; j++) {\n            let closestXVal = xAccessor(closestDataPoints[j])\n            let closestYVal = yAccessor(closestDataPoints[j])\n\n            closestValues.push([closestXVal, closestYVal])\n            circleCoords.push([xScale(closestXVal), yScale(closestYVal)])\n        }\n\n        setIsMouseMove(true)\n        setCurrentHoveredData(closestValues)\n        setCurrentHoveredCircleCoords(circleCoords)\n    }\n\n    const onMouseEnter = e => {\n    }\n\n    const onMouseLeave = e => {\n        setIsMouseMove(false)\n        setCurrentHoveredData()\n        setCurrentHoveredCircleCoords()\n    }\n\n    return (\n        <div className={classNames(\"Timeline\", className)} ref={ref}>\n            {currentHoveredCircleCoords && (\n                <Tooltip\n                    currentHoveredData={currentHoveredData}\n                    currentHoveredCircleCoords={currentHoveredCircleCoords}\n                    dimensions={dimensions}\n                    selectedExercise={selectedExercise}\n                />\n            )}\n\n            <Chart\n                dimensions={dimensions}\n                onMouseMove={onMouseMove}\n                onMouseEnter={onMouseEnter}\n                onMouseLeave={onMouseLeave}\n            >\n                <Axis\n                    dimension=\"x\"\n                    scale={xScale}\n                    formatTick={formatDate}\n                />\n                <Axis\n                    dimension=\"y\"\n                    scale={yScale}\n                    label={label}\n                />\n\n                {isMouseMove && (\n                    <>\n                        <rect\n                            className=\"Timeline__hover-line Timeline__hover-line--vertical\"\n                            width=\"1\"\n                            x={currentHoveredCircleCoords[0][0]}\n                            y={0}\n                            height={dimensions.boundedHeight}\n                            style={{ opacity: (isMouseMove ? 1 : 0) }}\n                        />\n                    </>\n                )}\n\n                {data.map((line, i) => (\n                    <Line\n                        className={classNames(`Line--exercise-${i}`, { \"Line--isDimmed\": selectedExercise < 5 && selectedExercise > 0 && selectedExercise !== i + 1})}\n                        key={i}\n                        data={line}\n                        xAccessor={xAccessorScaled}\n                        yAccessor={yAccessorScaled}\n                    />\n                ))}\n\n                {isMouseMove && (\n                    <>\n                        {data.map((circle, i) => (\n                            <Circle\n                                className={classNames(`Circle Circle--exercise-${i}`, { \"Circle--isDimmed\": selectedExercise < 5 && selectedExercise > 0 && selectedExercise !== i + 1 })}\n                                key={i}\n                                cx={currentHoveredCircleCoords[i][0]}\n                                cy={currentHoveredCircleCoords[i][1]}\n                                style={{ opacity: (isMouseMove ? 1 : 0) }}\n                            />\n                        ))}\n                    </>\n                )}\n\n            </Chart>\n        </div>\n    );\n};\n\nTimeline.propTypes = {\n    data: PropTypes.array,\n    xAccessor: PropTypes.func,\n    yAccessor: PropTypes.func,\n    label: PropTypes.string,\n};\n\nexport default Timeline;\n\nconst Circle = ({ className, cx, cy, style }) => {\n    return (\n        <circle className={classNames(\"Circle\", className)}\n            r={5}\n            fill=\"red\"\n            cx={cx}\n            cy={cy}\n            style={style}\n        />\n    )\n}\n\nconst Tooltip = ({ currentHoveredCircleCoords, currentHoveredData, dimensions, selectedExercise }) => {\n    let exercises = [\"A\", \"B\", \"C\", \"D\"]\n    let date = formatDate(currentHoveredData[0][0])\n    let leftScrubCoord = currentHoveredCircleCoords[0][0] + dimensions.marginLeft\n    let topScrubCoord = dimensions.marginTop\n\n    return (\n        <div className=\"Tooltip__container\" style={{ opacity: 1, left: `${leftScrubCoord}px`, top: `${topScrubCoord}px` }}>\n            <div className=\"Tooltip\">\n                <div className=\"Tooltip__date\">\n                    {date}\n                </div>\n                <div className=\"Tooltip__variations\">\n                    {currentHoveredData.map((data, i) => (\n                        <div className={classNames(\"Tooltip__variation\", `Tooltip__variation-${[i]}`, { \"Tooltip__variation--isDimmed\": selectedExercise < 5 && selectedExercise > 0 && selectedExercise !== i + 1 })} key={i}>\n                            <span className=\"Tooltip__variation__dot\"></span>\n                            <div className=\"Tooltip__variation__name\">\n                                Variation {exercises[i]}\n                            </div>\n                            <span className=\"Tooltip__variation__change\">\n                                {/* {currentHoveredData[i - 1] && (\n                                    <>\n                                        {currentHoveredData[i - 1][1] - currentHoveredData[i][1]}\n                                    </>\n                                )} */}\n                            </span>\n                            <span className=\"Tooltip__variation__bpm\">\n                                {data[1]} bpm\n                            </span>\n                        </div>\n                    ))}\n                </div>\n            </div>\n        </div>\n    )\n}","import React from 'react'\nimport classNames from \"classnames\"\nimport PropTypes from 'prop-types'\nimport './Staff.scss'\n\n\nconst Staff = ({ variations, selectedExercise }) => {\n\n    //let currentVariation = selectedExercise ? variations[selectedExercise - 1] : null\n    let currentVariation = variations[selectedExercise - 1]\n\n\n    return (\n        <div className=\"Staff__container\">\n            {variations[0].map((beats, i) => (\n                <div className=\"Staff__highHats__note\" key={i}>\n                    {highHat}\n                </div>\n            ))}\n\n            {variations[0].map((beats, i) => (\n                <StaffNoteCol key={i} variationNote={selectedExercise ? currentVariation[i] : \"\"}/>\n            ))}\n\n        </div>\n    );\n};\n\nStaff.propTypes = {\n    variations: PropTypes.array,\n};\n\nexport default Staff;\n\n\nconst StaffNoteCol = ({ variationNote } ) => {\n    return (\n        <div className=\"Staff__noteCol\">\n            <div className={classNames(\"Staff__noteCol__note Staff__noteCol__note--snare\", {\n                \"Staff__noteCol__note--isActive\" : variationNote === \"l\"\n            })}>\n                {note}\n            </div>\n            <div className={classNames(\"Staff__noteCol__note Staff__noteCol__note--bass\", {\n                \"Staff__noteCol__note--isActive\": variationNote === \"r\"\n            })}>\n                {note}\n            </div>\n        </div>\n    )\n}\n\n\nconst highHat =\n    <svg width=\"10\" height=\"32\" viewBox=\"0 0 10 32\" fill=\"none\">\n        <path d=\"M9.63896 23.1039V0.0205078H8.70702V22.172L4.97927 25.8997L1.28736 22.172L0.31958 23.1039L4.04733 26.8316L0.31958 30.5594L1.28736 31.4555L4.97927 27.7636L8.70702 31.4555L9.63896 30.5594L5.91121 26.8316L9.63896 23.1039Z\" />\n    </svg>\n\nconst note =\n    <svg width=\"10\" height=\"33\" viewBox=\"0 0 10 33\" fill=\"none\">\n        <path d=\"M9.74211 26.9949C9.74211 27.7986 9.44257 28.6315 8.84348 29.4936C8.21518 30.3118 7.40422 30.9474 6.41062 31.4004C5.43163 31.8388 4.47455 32.0579 3.5394 32.0579C2.70652 32.0579 1.96132 31.8168 1.30379 31.3346C0.675482 30.8525 0.361328 30.2095 0.361328 29.4059C0.361328 28.5438 0.675482 27.7036 1.30379 26.8854C1.59603 26.5639 1.95402 26.2351 2.37776 25.8991C2.8015 25.5484 3.26908 25.205 3.78049 24.8689C4.32113 24.6351 4.81062 24.4671 5.24898 24.3648C5.70194 24.2625 6.1403 24.2114 6.56404 24.2114C7.45536 24.2114 8.2444 24.4598 8.93115 24.9566V0.62793H9.74211V26.9949Z\" />\n    </svg>","import React from 'react'\nimport classNames from \"classnames\"\nimport PropTypes from 'prop-types'\nimport Staff from 'components/Paradiddle/Staff'\nimport './Exercises.scss'\n\nconst Exercises = ({ variations, handleVariationChange, selectedExercise }) => {\n    let exercises = [\"A\", \"B\", \"C\", \"D\"]\n    let count = [\"1\", \"+\", \"2\", \"+\", \"3\", \"+\", \"4\", \"+\"]\n\n    return (\n        <div className=\"Exercises\">\n            <div className=\"Exercises__staff\" >\n                <Staff variations={variations} selectedExercise={selectedExercise}/>\n                <div className=\"Exercises__count\">\n                    {count.map((step, i) => (\n                        <span className=\"Exercises__count__item\" key={i}>\n                            {step}\n                        </span>\n                    ))}\n                </div>\n            </div>\n\n            <div className=\"Exercises__variations\">\n                {variations.map((variation, i) => (\n                    <div className={classNames(`Exercises__variation Exercises__variation--${i+1}`, {\n                        \"Exercises__variation--isActive\" : selectedExercise === i + 1\n                    })}\n                        key={i} onClick={() => handleVariationChange((selectedExercise === i + 1) ? \"\" : i + 1)}>\n                        <div className=\"Exercises__variation__title\">\n                            <div className=\"Exercises__variation__dot\"></div> Variation {exercises[i]}\n                        </div>\n                        {variations[i].map((step, i) => (\n                            <span key={i} className=\"Exercises__variation__step\">\n                                {step}\n                            </span>\n                        ))}\n                    </div>\n                ))}\n            </div>\n\n            {/* <Button\n                className=\"Exercises__reset\"\n                onClick={() => handleVariationChange(\"\")}\n                category=\"secondary\">\n                Reset\n            </Button> */}\n        </div>\n    );\n};\n\nExercises.propTypes = {\n    variations: PropTypes.array,\n};\n\nexport default Exercises;","import React, { useState } from 'react'\nimport * as d3 from \"d3\"\nimport Timeline from 'components/Paradiddle/Timeline'\nimport Exercises from 'components/Paradiddle/Exercises'\nimport Link from 'components/_ui/Link/Link'\nimport \"./ParadiddleContainer.scss\"\n\nimport dataA from 'components/Paradiddle/paradiddleA.json'\nimport dataB from 'components/Paradiddle/paradiddleB.json'\nimport dataC from 'components/Paradiddle/paradiddleC.json'\nimport dataD from 'components/Paradiddle/paradiddleD.json'\n\nconst parseDate = d3.timeParse(\"%Y-%m-%d\")\nconst dateAccessor = d => parseDate(d.date)\nconst bpmAccessor = d => d.bpm\n\nconst variationA = [\"r\", \"l\", \"r\", \"r\", \"l\", \"r\", \"l\", \"l\"]\nconst variationB = [\"r\", \"l\", \"l\", \"r\", \"l\", \"r\", \"r\", \"l\"]\nconst variationC = [\"r\", \"r\", \"l\", \"r\", \"l\", \"l\", \"r\", \"l\"]\nconst variationD = [\"r\", \"l\", \"r\", \"l\", \"l\", \"r\", \"l\", \"r\"]\n\nconst ParadiddleContainer = () => {\n    let data = [dataA, dataB, dataC, dataD]\n    let variations = [variationA, variationB, variationC, variationD]\n    const [selectedExercise, setSelectedExercise] = useState(null)\n\n    function handleVariationChange(variation) {\n        setSelectedExercise(variation)\n    }\n\n    return (\n        <div className=\"ParadiddleContainer\">\n            <Timeline\n                data={data}\n                xAccessor={dateAccessor}\n                yAccessor={bpmAccessor}\n                label=\"BPM\"\n                className=\"ParadiddleContainer__timeline\"\n                selectedExercise={selectedExercise}\n            />\n            <div className=\"ParadiddleContainer__content\">\n                <h1>\n                    7 Days of Paradiddle Variations 🥁\n                </h1>\n                <div>\n                    With quarter note high hat pulse\n                </div>\n                <Exercises\n                    handleVariationChange={handleVariationChange}\n                    variations={variations}\n                    selectedExercise={selectedExercise}\n                />\n            </div>\n            <p className=\"ParadiddleContainer__description\">\n                For a week in November I practiced a set of paradiddle drumming variations\n                I was assigned. Not sure which was more fun (work?)&mdash;practicing at the kit or\n                developing this chart in <Link doOpenInNewTab to={\"https://codepen.io/marguerite/pen/GRgoxxv\"}>vanilla JS + d3</Link> then <Link doOpenInNewTab to=\"https://github.com/margueriteroth/rosie/tree/master/src/components/Paradiddle\">React</Link> 🤔.\n            </p>\n        </div>\n    );\n};\n\nexport default ParadiddleContainer;","import React, { useState } from 'react'\nimport * as d3 from \"d3\"\nimport { faGithub } from '@fortawesome/free-brands-svg-icons'\nimport Layout from 'components/Layout/Layout'\nimport MaxWidth from 'components/_ui/MaxWidth/MaxWidth'\nimport SEO from 'components/SEO/SEO'\nimport ParadiddleContainer from 'components/Paradiddle/ParadiddleContainer'\nimport \"./paradiddles.scss\"\n\nconst Paradiddles = () => {\n\n    return (\n        <>\n            <Layout\n                className=\"Paradiddles__layout\" showFooter>\n                <SEO title=\"Paradiddles Data Visualization\" image=\"https://marguerite.io/og-image-paradiddles.png\" twitterImage=\"https://marguerite.io/twitter-image-paradiddles.png\"/>\n\n                <MaxWidth size=\"l\" className=\"Paradiddles\">\n                    <ParadiddleContainer/>\n                </MaxWidth>\n            </Layout>\n        </>\n    )\n}\n\nexport default Paradiddles;\n\n"],"sourceRoot":""}